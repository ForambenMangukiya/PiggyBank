:root {
  --red: #c80048;
  --blue: #453f78;

  --gray-1: #e9e9e9;
  --gray-2: #d9d9d9;
  --gray-3: #b9b9b9;

  --header: linear-gradient(#c80048, #961c48);

  /* use these predefined colors by adding .. var()
    for example color : var(--red) */
}

.container {
  /* Add container styles if needed */
}

.transaction-item {
  flex: 1;
  margin-right: 15px;
  padding: 6px 0px 6px 0px;
}
.transactions-container .tabs-div {
  border: 1px solid var(--red);
  border-radius: 31px;
  padding: 0rem;
  margin: 2rem 0rem 0rem 0rem;
}

.transactions-container .tab {
  flex: 1;
  padding: 0rem 4rem 0rem 2rem;
  margin: 0.2rem;
  font-size: 0.8rem;
  color: var(--red);
  font-weight: 500;
}
.transactions-container .active {
  background-color: var(--red);
  border-radius: 31px;
  color: white;
}

.transactions-container
  .css-1h9z7r5-MuiButtonBase-root-MuiTab-root.Mui-selected {
  color: white;
}

.transactions-container .transaction-div {
  background-color: var(--gray-1);
  border-radius: 32px;
  margin-bottom: 15px;
}

.transactions-container .transaction-filter {
  background-color: var(--gray-1);
  border-radius: 32px;
}

.transactions-container
  .MuiInputBase-formControl
  .css-11u53oe-MuiSelect-select-MuiInputBase-input-MuiOutlinedInput-input {
  padding: 1rem;
}

.transactions-container .transaction-filter label {
  display: flex;
  align-items: center;
  padding: 0;
  margin: 0;
}
/* By assigning a flexible width to each element (amount, category, date), and adding a margin to the right side, the elements will align consistently even if the content length varies.
  
  Make sure to update the CSS file path in the import statement according to your project structure.
  
  Note: This solution assumes that you have a separate CSS file (transactions.css) where you define your styles. If you don't have one, you can either create a new CSS file and import it or add the CSS styles inline using the style prop on the respective elements. */
